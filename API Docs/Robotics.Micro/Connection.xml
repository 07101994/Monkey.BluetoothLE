<Type Name="Connection" FullName="Robotics.Micro.Connection">
  <TypeSignature Language="C#" Value="public class Connection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Connection extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Robotics.Micro.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a connection between two ports.</summary>
    <remarks>
      <para>
        The Robotics microframework library loosely follows a Reactive Programming (see: http://en.wikipedia.org/wiki/Reactive_programming) 
        pattern. This means that instead of a traditional event-driven model (which works well in tradition UI apps), components within 
        any paritcular hardware configuration are actually bound to each other, such that an output signal from one block is automatically
        passed to another block.
      </para>
      <para>
        This reactive pattern works incredibly well for circuits because signals tend to be a constant, rather than periodic events such as
        a person interacting with a UI. As such, the Connector class is necessary to actually bind two blocks together to handle the plumbing.
      </para>
      <para>
        Note that it's not enough to simply create a connection object, but you must actually call the ConnectTo() method to bind two ports 
        together.
      </para>
      <example>
        <code lang="C#"><![CDATA[
  public class Program
  {
    // create our pin references.
    // note, when you create a reference to the onboard button, netduino is 
    // smart enough to not use it as a reset button. :)
    static H.Cpu.Pin buttonHardware = Pins.ONBOARD_BTN;
    static H.Cpu.Pin ledHardware = Pins.ONBOARD_LED;

    public static void Main()
    {
      // Create the blocks
      var button = new DigitalInputPin (buttonHardware);
      var led = new DigitalOutputPin (ledHardware);

      // Connect them together. with the block/scope architecture, you can think
      // of everything as being connectable - output from one thing can be piped
      // into another. in this case, we're setting the button output to the LED
      // input. so when the user presses on the button, the signal goes straight
      // to the LED.
      button.Output.ConnectTo (led.Input);

      // keep the program alive
      while (true) {
        System.Threading.Thread.Sleep (1000);
      }
    }
  }
        ]]></code>
      </example>


  </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Connection (Robotics.Micro.Port fromPort, Robotics.Micro.Port toPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Robotics.Micro.Port fromPort, class Robotics.Micro.Port toPort) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fromPort" Type="Robotics.Micro.Port" />
        <Parameter Name="toPort" Type="Robotics.Micro.Port" />
      </Parameters>
      <Docs>
        <param name="fromPort">To be added.</param>
        <param name="toPort">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public void Disconnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Disconnect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public Robotics.Micro.Port From { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Robotics.Micro.Port From" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Robotics.Micro.Port</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="To">
      <MemberSignature Language="C#" Value="public Robotics.Micro.Port To { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Robotics.Micro.Port To" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Robotics.Micro.Port</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
